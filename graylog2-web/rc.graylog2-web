#! /bin/sh

DESC="Graylog2 Web Interface"
NAME=graylog2-web
GRAYLOG2_WEB_HOME=/usr/share/graylog2/web
JAR_DIRECTORY="${GRAYLOG2_WEB_HOME}/lib"

if [ -e /etc/profile.d/jdk.sh ]; then
    source /etc/profile.d/jdk.sh
fi

DAEMON=$(which java)
PIDFILE=/var/run/graylog2/$NAME.pid
LOGFILE=/var/log/graylog2/$NAME.log
SCRIPTNAME=/etc/rc.d/rc.$NAME
JAVA_MIN_MEM=128m
JAVA_MAX_MEM=1024m
JAVA_MAX_PERM_SIZE=256m
HTTP_ADDRESS="0.0.0.0"
HTTP_PORT="9000"
GRAYLOG2_USER=graylog2
GRAYLOG2_GROUP=graylog2

[ -r /etc/default/$NAME ] && . /etc/default/$NAME


# Exit if the package is not installed
[ -d "$JAR_DIRECTORY" ] || exit 0
[ -x "$DAEMON" ] || exit 0

[ -r /etc/default/$NAME ] && . /etc/default/$NAME


JAVA_CLASS_PATH=""
for jar in $(ls $JAR_DIRECTORY); do
    JAVA_CLASS_PATH="${JAVA_CLASS_PATH}:${JAR_DIRECTORY}/${jar}"
done

DAEMON_ARGS="-Xms${JAVA_MIN_MEM} -Xmx${JAVA_MAX_MEM} -Dhttp.port='${HTTP_PORT}' -Dhttp.address='${HTTP_ADDRESS}' -Dlogger.file=/etc/graylog2/web/graylog2-web-logger.xml -XX:MaxPermSize=${JAVA_MAX_PERM_SIZE} -Duser.dir=${GRAYLOG2_WEB_HOME}  -Dpidfile.path=$PIDFILE -cp \"$JAVA_CLASS_PATH\" play.core.server.NettyServer"

. /etc/init.d/functions

make_dir() {
    DIR=$(dirname $1)
    if [ ! -e $DIR ]; then
        mkdir -p $DIR
    fi
    RIGHTS=$(stat -c "%U:%G" $DIR)
    if [ "$RIGHTS" != "${GRAYLOG2_USER}:${GRAYLOG2_GROUP}" ]; then
        chown ${GRAYLOG2_USER}:${GRAYLOG2_GROUP} ${DIR}
    fi
}

running()
{
        [ ! -f "$PIDFILE" ] && return 1
        status="0"
        pidofproc -p $PIDFILE "play.core.server.NettyServer" >/dev/null || status="$?"
        if [ "$status" = 0 ]; then
                return 0
        fi

        return 1
}


do_start()
{
    make_dir $PIDFILE
    make_dir $LOGFILE

    if running ; then
        success "apparently already running"
        return 1
    else
        su -s /bin/bash -c "nohup $DAEMON $DAEMON_ARGS >> $LOGFILE 2>&1 &" ${GRAYLOG2_USER} || return 2
        sleep 2
        if running ; then
            return 0
        else
            return 2
        fi
    fi
}

do_stop()
{
    if running ; then
        if [ -s $PIDFILE ]; then
            kill `cat ${PIDFILE}` >/dev/null 2>&1
        fi
        rm -f $PIDFILE
        return "0"
    else
        return "2"
    fi
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && echo -n "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && success  ;;
                2) [ "$VERBOSE" != no ] && warning ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && echo -n "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && success ;;
                2) [ "$VERBOSE" != no ] && warning ;;
        esac
        ;;
  status)
       status -p "${PIDFILE}" "$DAEMON" "$NAME" && exit 0 || exit $?
       ;;
  restart|force-reload)
        echo "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) success ;;
                        1) warning ;; # Old process is still running
                        *) failure ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                failure
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

echo ""

