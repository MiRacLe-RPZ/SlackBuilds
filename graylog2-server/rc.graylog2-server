#! /bin/sh

DESC="Graylog2 Server"
NAME=graylog2-server
JAR_FILE=/usr/share/graylog2/server/graylog2-server.jar

if [ -e /etc/profile.d/jdk.sh ]; then
    source /etc/profile.d/jdk.sh
fi

DAEMON=$(/bin/which java)

PIDFILE=/var/run/graylog2/$NAME.pid
LOGFILE=/var/log/graylog2/$NAME.log
DAEMON_ARGS="-Djava.net.preferIPv4Stack=true -jar $JAR_FILE -p $PIDFILE -f /etc/graylog2/server/server.conf"
SCRIPTNAME=/etc/rc.d/rc.$NAME
DAEMON_USER=graylog2
DAEMON_GROUP=graylog2

[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Exit if the package is not installed
[ -e "$JAR_FILE" ] || exit 0
[ -x "$DAEMON" ] || exit 0


. /etc/init.d/functions


make_dir() {
    DIR=$(dirname $1)
    if [ ! -e $DIR ]; then
        mkdir -p $DIR
    fi
    RIGHTS=$(stat -c "%U:%G" $DIR)
    if [ "$RIGHTS" != "${DAEMON_USER}:${DAEMON_GROUP}" ]; then
        chown ${DAEMON_USER}:${DAEMON_GROUP} ${DIR}
    fi
}

running()
{
    [ ! -f "$PIDFILE" ] && return 1
    status="0"
    pidofproc -p $PIDFILE $JAR_FILE >/dev/null || status="$?"
    if [ "$status" = 0 ]; then
            return 0
    fi

    return 1
}

do_start()
{
    make_dir $PIDFILE
    make_dir $LOGFILE

    if running ; then
        success "apparently already running"
        return 1
    else
        su -s /bin/bash -c "$DAEMON $DAEMON_ARGS >> $LOGFILE 2>&1 &" ${DAEMON_USER} || return 2
        sleep 2
        if running ; then
            return 0
        else
            return 2
        fi
    fi
}

do_stop()
{
    if running ; then
        if [ -s $PIDFILE ]; then
            kill `cat ${PIDFILE}` >/dev/null 2>&1
        fi
        rm -f $PIDFILE
        return "0"
    else
        return "2"
    fi
}

cfg_input()
{
    printf "Admin password please: "
    stty -echo
    read pass
    stty echo
    printf '\n'

    GRAYLOG2_URL="http://admin:${pass}@127.0.0.1:12900"

    GRAYLOG2_INPUT_GELF_UDP='
    {
          "global": "true",
          "title": "Gelf UDP",
          "configuration": {
            "port": 12201,
            "bind_address": "0.0.0.0"
          },
          "creator_user_id": "admin",
          "type": "org.graylog2.inputs.gelf.udp.GELFUDPInput"
    }'


    INPUTS=$(curl -X GET -H "Content-Type: application/json" ${GRAYLOG2_URL}/system/inputs 2>/dev/null)

    if [ $(echo $INPUTS | grep -c "GELF UDP") != "1" ]; then
        curl -X POST -H "Content-Type: application/json" -d "${GRAYLOG2_INPUT_GELF_UDP}" ${GRAYLOG2_URL}/system/inputs > /dev/null
    fi
    success
}

case "$1" in
  start)
        [ "$VERBOSE" != no ] && echo -n "Starting $DESC" "$NAME"
        do_start
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && success  ;;
                2) [ "$VERBOSE" != no ] && warning ;;
        esac
        ;;
  stop)
        [ "$VERBOSE" != no ] && echo -n "Stopping $DESC" "$NAME"
        do_stop
        case "$?" in
                0|1) [ "$VERBOSE" != no ] && success ;;
                2) [ "$VERBOSE" != no ] && warning ;;
        esac
        ;;
  status)
        if running ; then
          echo "${NAME} running as pid $(cat $PIDFILE)"
        else
          echo "${NAME} is not running"
          if [ -f "$PIDFILE" ]; then
            echo "Stale pid file with $(cat $PIDFILE) - removing..."
            rm -f $PIDFILE
            exit 2
          fi
        fi
        exit 0
       ;;
  setup)
       cfg_input
       ;;
  restart|force-reload)
        echo "Restarting $DESC" "$NAME"
        do_stop
        case "$?" in
          0|1)
                do_start
                case "$?" in
                        0) success ;;
                        1) warning ;; # Old process is still running
                        *) failure ;; # Failed to start
                esac
                ;;
          *)
                # Failed to stop
                failure
                ;;
        esac
        ;;
  *)
        echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
        exit 3
        ;;
esac

echo ""
